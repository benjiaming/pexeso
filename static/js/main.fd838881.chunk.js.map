{"version":3,"sources":["BoxList.js","Game.js","Pexeso.js","serviceWorker.js","index.js"],"names":["Box","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","e","onClick","square","id","_this$props","loaded","cat","react_default","a","createElement","src","image","style","maxWidth","maxHeight","alt","pexesoClass","guessed","className","shown","Component","BoxList","_this$props2","rowLen","squares","boxList","toConsumableArray","Array","fill","map","Null","i","key","row","r","colNum","BoxList_Box","undefined","boxRow","GameOver","window","location","reload","Game","state","Math","pow","cats","paused","numTries","preloadImages","arr","floor","random","length","position","getRandomPosition","$","isEmptyObject","num","_this2","forEach","getNextSquarePosition","newSquare","setState","promises","getJSON","Promise","all","results","Image","url","_this3","initSquares","otherSquareId","s","sid","reduce","ac","currentIndex","_this4","objectSpread","setTimeout","selectedSquare","disableSelectedSquares","hideAllSquares","_this5","otherSquare","every","_this6","isGuessingSecond","prevState","checkOtherSquareId","isOver","Game_GameOver","src_BoxList","textAlign","Header","Footer","href","Pexeso","Pexeso_Header","src_Game","Pexeso_Footer","Boolean","hostname","match","ReactDOM","render","src_Pexeso_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd838881.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Box.css';\n\nclass Box extends Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(e) {\n        this.props.onClick(this.props.square, this.props.id);\n    }\n    render() {\n        const {square, loaded} = this.props;\n        const imgStyle = {\n            maxWidth: \"100%\",\n            maxHeight: \"100%\",\n        };\n        const cat = <img src={square.image} style={imgStyle} alt=\"cat\"></img>;\n        let pexesoClass='pexeso-box';\n        if (square.guessed) {\n            pexesoClass += ' flip-vertical-right hidden';\n        }\n        return (\n            <div className={pexesoClass} onClick={this.handleClick}>\n               { loaded && square.shown ?  cat : <i className=\"far fa-question-circle question\"></i> }\n            </div>\n        )\n    }\n}\n\nclass BoxList extends Component {\n    render() {\n        const { rowLen, squares, loaded, onClick } = this.props;\n        const boxRow = (rowLen, row) => [...Array(rowLen)].fill().map((r, colNum) => {\n            const key = row + (colNum*rowLen);\n            return loaded ? <Box \n                key={key} \n                id={key}\n                square={squares[key]} \n                loaded={loaded}\n                onClick={onClick}\n             /> : undefined\n        });\n        const boxList = [...Array(rowLen)].fill().map((Null, i) => {\n            return <div key={i} className=\"box-row\">{boxRow(rowLen, i)}</div>\n        });\n        return (\n            <div className=\"box-list\">\n                {loaded ? boxList : \"Loading...\"}\n            </div>\n        );\n    }\n}\n\nexport default BoxList;\n\n","import React, { Component } from 'react';\nimport $ from \"jquery\";\nimport BoxList from './BoxList';\n\nconst GameOver = () => {\n    return (\n        <div className=\"game-over\">\n            <div>Purrrr! Nicely done!  Meow!!!</div>\n            <button onClick={() => window.location.reload() }>Try again?</button>\n        </div>\n    )\n}\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.rowLen = 4; //even number\n        this.state = {\n            squares: [...Array(this.rowLen ** 2)].fill({}),\n            loaded: false,\n            cats: [],\n            paused: false,\n            numTries: 0,\n        };\n        this.onClick = this.onClick.bind(this);\n    }\n    componentDidMount() {\n        this.preloadImages((this.rowLen ** 2)/ 2);\n    }\n    getRandomPosition(arr) {\n        return Math.floor(Math.random()*arr.length);\n    }\n    getNextSquarePosition(squares) {\n        let position;\n        do {\n            position = this.getRandomPosition(squares);\n        } while (!$.isEmptyObject(squares[position]));\n        return position;\n    }\n    newSquare(src) {\n        return {\n            image: src,\n            shown: false,\n            guessed: false,\n        }\n    }\n    initSquares(num) {\n        const squares = [...this.state.squares];\n        this.state.cats.forEach(cat => {\n            let position = this.getNextSquarePosition(squares);\n            squares[position] = this.newSquare(cat.src);\n            position = this.getNextSquarePosition(squares);\n            squares[position] = this.newSquare(cat.src); \n        });\n        this.setState({squares, loaded: true})\n    }\n    async preloadImages(num) {\n        const url = 'https://api.thecatapi.com/v1/images/search?size=full';\n        const promises = [...Array(num)].fill().map(i => $.getJSON(url));\n        const results = await Promise.all(promises);\n        const cats = results.map(r => {\n            const image = new Image();\n            image.src = r[0].url;\n            return image;\n        });\n        this.setState({cats}, () => { this.initSquares(this.rowLen) });\n    }\n\n    otherSquareId(square, id) {\n        let otherSquareId;\n        this.state.squares.forEach((s, sid) => {\n            if (id !== sid && s.image === square.image && s.shown) {\n                otherSquareId = sid;\n                return;\n            }\n        });\n        return otherSquareId;\n    }\n    isGuessingSecond(squares) {\n        const numShown = squares.reduce((ac, s, currentIndex) => {\n            if (s.shown && !s.guessed) {\n                ac++;\n            }\n            return ac;\n        }, 0);\n        return numShown % 2 === 0;\n    }\n    hideAllSquares() {\n        const squares = [...this.state.squares];\n        this.state.squares.forEach((s, i) => {\n        if (s.shown) {\n            const newSquare = {...s};\n            newSquare.shown = false;\n            squares[i] = newSquare;\n        }\n        });\n        this.setState({paused: true}, () => {\n            setTimeout(() => {this.setState({paused: false, squares})}, 1000);\n        });\n    }\n    checkOtherSquareId(selectedSquare, id, squares) {\n        const otherSquareId = this.otherSquareId(selectedSquare, id);\n        if (otherSquareId === undefined) {\n            this.hideAllSquares();\n            return;\n        }\n        this.disableSelectedSquares(selectedSquare, squares, otherSquareId);\n    }\n    disableSelectedSquares(selectedSquare, squares, otherSquareId) {\n        this.setState({ paused: true }, () => {\n            setTimeout(() => {\n                selectedSquare.guessed = true;\n                const otherSquare = { ...squares[otherSquareId] };\n                otherSquare.guessed = true;\n                squares[otherSquareId] = otherSquare;\n                this.setState({ paused: false, squares });\n            }, 500);\n        });\n    }\n    isOver() {\n        if (!this.state.loaded) {\n            return false;\n        }\n        return this.state.squares.every(square => square.guessed);\n    }\n    onClick(square, id) {\n        if (this.state.paused) {\n            return;\n        }\n        const squares = [...this.state.squares];\n        const selectedSquare = {...squares[id]};\n        selectedSquare.shown = !selectedSquare.shown;\n        squares[id] = selectedSquare;  \n        this.setState({squares}, () => {     \n            if (this.isGuessingSecond(squares)) {\n                this.setState(prevState => {\n                    prevState.numTries = prevState.numTries+1\n                }, () => {\n                    this.checkOtherSquareId(selectedSquare, id, squares);\n                });\n            }\n        });\n    }\n\n    render() {\n        if (this.isOver()) {\n            return <GameOver />\n        }\n        return (\n            <div className=\"game\">\n            {this.state.loaded ?\n                <div>\n                    <BoxList \n                        rowLen={this.rowLen} \n                        loaded={this.state.loaded} \n                        squares={this.state.squares} \n                        onClick={this.onClick}\n                    />\n                    <div style={{textAlign: \"center\"}}>Attempts: {this.state.numTries}</div>\n                </div>\n                : <div style={{textAlign:\"center\"}}>Herding cats. Please wait...</div>}\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport Game from './Game';\nimport './Pexeso.css';\n\nconst Header = () => {\n  return (\n    <div className=\"header\">Pexeso</div>\n  );\n}\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n       Cats courtesy of <a href=\"https://thecatapi.com/\">TheCatAPI - Cats as a Service, Everyday is Caturday.</a>\n    </div>\n  );\n}\nclass Pexeso extends Component {\n  render() {\n    return (\n      <div className=\"Pexeso\">\n        <Header />\n        <Game />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Pexeso;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pexeso from './Pexeso';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pexeso />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}